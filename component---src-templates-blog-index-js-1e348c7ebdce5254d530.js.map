{"version":3,"sources":["webpack:///./src/components/PostCard.js","webpack:///./src/components/PostSection.js","webpack:///./src/components/BlogSearch.js","webpack:///./src/components/PostCategoriesNav.js","webpack:///./src/templates/BlogIndex.js"],"names":["PostCard","featuredImage","title","excerpt","slug","categories","className","to","Image","background","src","alt","map","cat","category","join","PostSection","state","limit","props","increaseLimit","setState","prevState","perPageLimit","render","this","posts","showLoadMore","loadMoreTitle","visiblePosts","slice","length","post","index","key","onClick","React","Component","defaultProps","pageCount","location","search","qs","parse","replace","type","value","s","placeholder","onChange","e","target","stringify","url","href","origin","navigate","PostCategoriesNav","enableSearch","exact","BlogSearch","byDate","now","Date","filter","date","byCategory","contentType","BlogIndexTemplate","subtitle","postCategories","filteredPosts","queryObj","searchTerm","toLowerCase","frontmatter","includes","PageHeader","backgroundImage","pageQuery","BlogIndex","data","page","Layout","meta","fields","edges","node"],"mappings":"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","file":"component---src-templates-blog-index-js-1e348c7ebdce5254d530.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nimport Image from './Image'\r\nimport './PostCard.css'\r\n\r\nconst PostCard = ({\r\n  featuredImage,\r\n  title,\r\n  excerpt,\r\n  slug,\r\n  categories = [],\r\n  className = '',\r\n  ...props\r\n}) => (\r\n  <Link to={slug} className={`PostCard ${className}`}>\r\n    {featuredImage && (\r\n      <div className=\"PostCard--Image relative\">\r\n        <Image background src={featuredImage} alt={title} />\r\n      </div>\r\n    )}\r\n    <div className=\"PostCard--Content\">\r\n      {title && <h3 className=\"PostCard--Title\">{title}</h3>}\r\n      <div className=\"PostCard--Category\">\r\n        {categories && categories.map(cat => cat.category).join(', ')}\r\n      </div>\r\n      {excerpt && <div className=\"PostCard--Excerpt\">{excerpt}</div>}\r\n    </div>\r\n  </Link>\r\n)\r\n\r\nexport default PostCard\r\n","import React from 'react'\r\n\r\nimport PostCard from '../components/PostCard'\r\nimport './PostSection.css'\r\n\r\nclass PostSection extends React.Component {\r\n  static defaultProps = {\r\n    posts: [],\r\n    title: '',\r\n    limit: 12,\r\n    showLoadMore: true,\r\n    loadMoreTitle: 'Load More',\r\n    perPageLimit: 12\r\n  }\r\n\r\n  state = {\r\n    limit: this.props.limit\r\n  }\r\n\r\n  increaseLimit = () =>\r\n    this.setState(prevState => ({\r\n      limit: prevState.limit + this.props.perPageLimit\r\n    }))\r\n\r\n  render() {\r\n    const { posts, title, showLoadMore, loadMoreTitle } = this.props,\r\n      { limit } = this.state,\r\n      visiblePosts = posts.slice(0, limit || posts.length)\r\n\r\n    return (\r\n      <div className=\"PostSection\">\r\n        {title && <h2 className=\"PostSection--Title\">{title}</h2>}\r\n        {!!visiblePosts.length && (\r\n          <div className=\"PostSection--Grid\">\r\n            {visiblePosts.map((post, index) => (\r\n              <PostCard key={post.title + index} {...post} />\r\n            ))}\r\n          </div>\r\n        )}\r\n        {showLoadMore && visiblePosts.length < posts.length && (\r\n          <div className=\"taCenter\">\r\n            <button className=\"button\" onClick={this.increaseLimit}>\r\n              {loadMoreTitle}\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PostSection\r\n","import React from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport { Location } from '@reach/router'\r\nimport qs from 'qs'\r\n\r\nexport default ({ pageCount }) => {\r\n  return (\r\n    <Location>\r\n      {({ location }) => {\r\n        let search = qs.parse(location.search.replace('?', ''))\r\n\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            value={search.s || ''}\r\n            placeholder=\"Search...\"\r\n            onChange={e => {\r\n              let search = {}\r\n              search.s = e.target.value\r\n              search = qs.stringify(search)\r\n\r\n              const url = location.href\r\n                .replace(location.origin, '')\r\n                .replace(location.search, '')\r\n\r\n              navigate(`${url}?${search}`)\r\n            }}\r\n          />\r\n        )\r\n      }}\r\n    </Location>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nimport BlogSearch from './BlogSearch'\r\nimport './PostCategoriesNav.css'\r\n\r\nconst PostCategoriesNav = ({ categories, enableSearch }) => (\r\n  <div className=\"PostCategoriesNav\">\r\n    <Link className=\"NavLink\" exact=\"true\" to={`/blog/`}>\r\n      All\r\n    </Link>\r\n    {categories.map((category, index) => (\r\n      <Link\r\n        exact=\"true\"\r\n        className=\"NavLink\"\r\n        key={category.title + index}\r\n        to={category.slug}\r\n      >\r\n        {category.title}\r\n      </Link>\r\n    ))}\r\n\r\n    {enableSearch && <BlogSearch />}\r\n  </div>\r\n)\r\n\r\nexport default PostCategoriesNav\r\n","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { Location } from '@reach/router'\r\nimport qs from 'qs'\r\n\r\nimport PageHeader from '../components/PageHeader'\r\nimport PostSection from '../components/PostSection'\r\nimport PostCategoriesNav from '../components/PostCategoriesNav'\r\nimport Layout from '../components/Layout'\r\n\r\n/**\r\n * Filter posts by date. Feature dates will be fitered\r\n * When used, make sure you run a cronejob each day to show schaduled content. See docs\r\n *\r\n * @param {posts} object\r\n */\r\nexport const byDate = posts => {\r\n  const now = Date.now()\r\n  return posts.filter(post => Date.parse(post.date) <= now)\r\n}\r\n\r\n/**\r\n * filter posts by category.\r\n *\r\n * @param {posts} object\r\n * @param {title} string\r\n * @param {contentType} string\r\n */\r\nexport const byCategory = (posts, title, contentType) => {\r\n  const isCategory = contentType === 'postCategories'\r\n  const byCategory = post =>\r\n    post.categories &&\r\n    post.categories.filter(cat => cat.category === title).length\r\n  return isCategory ? posts.filter(byCategory) : posts\r\n}\r\n\r\n// Export Template for use in CMS preview\r\nexport const BlogIndexTemplate = ({\r\n  title,\r\n  subtitle,\r\n  featuredImage,\r\n  posts = [],\r\n  postCategories = [],\r\n  enableSearch = true,\r\n  contentType\r\n}) => (\r\n  <Location>\r\n    {({ location }) => {\r\n      let filteredPosts =\r\n        posts && !!posts.length\r\n          ? byCategory(byDate(posts), title, contentType)\r\n          : []\r\n\r\n      let queryObj = location.search.replace('?', '')\r\n      queryObj = qs.parse(queryObj)\r\n\r\n      if (enableSearch && queryObj.s) {\r\n        const searchTerm = queryObj.s.toLowerCase()\r\n        filteredPosts = filteredPosts.filter(post =>\r\n          post.frontmatter.title.toLowerCase().includes(searchTerm)\r\n        )\r\n      }\r\n\r\n      return (\r\n        <main className=\"Blog\">\r\n          <PageHeader\r\n            title={title}\r\n            subtitle={subtitle}\r\n            backgroundImage={featuredImage}\r\n          />\r\n\r\n          {!!postCategories.length && (\r\n            <section className=\"section thin\">\r\n              <div className=\"container\">\r\n                <PostCategoriesNav enableSearch categories={postCategories} />\r\n              </div>\r\n            </section>\r\n          )}\r\n\r\n          {!!posts.length && (\r\n            <section className=\"section\">\r\n              <div className=\"container\">\r\n                <PostSection posts={filteredPosts} />\r\n              </div>\r\n            </section>\r\n          )}\r\n        </main>\r\n      )\r\n    }}\r\n  </Location>\r\n)\r\n\r\n// Export Default BlogIndex for front-end\r\nconst BlogIndex = ({ data: { page, posts, postCategories } }) => (\r\n  <Layout\r\n    meta={page.frontmatter.meta || false}\r\n    title={page.frontmatter.title || false}\r\n  >\r\n    <BlogIndexTemplate\r\n      {...page}\r\n      {...page.fields}\r\n      {...page.frontmatter}\r\n      posts={posts.edges.map(post => ({\r\n        ...post.node,\r\n        ...post.node.frontmatter,\r\n        ...post.node.fields\r\n      }))}\r\n      postCategories={postCategories.edges.map(post => ({\r\n        ...post.node,\r\n        ...post.node.frontmatter,\r\n        ...post.node.fields\r\n      }))}\r\n    />\r\n  </Layout>\r\n)\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  ## Query for BlogIndex data\r\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\r\n  ## $id is processed via gatsby-node.js\r\n  ## query name must be unique to this file\r\n  query BlogIndex($id: String!) {\r\n    page: markdownRemark(id: { eq: $id }) {\r\n      ...Meta\r\n      fields {\r\n        contentType\r\n      }\r\n      frontmatter {\r\n        title\r\n        excerpt\r\n        template\r\n        subtitle\r\n        featuredImage\r\n      }\r\n    }\r\n\r\n    posts: allMarkdownRemark(\r\n      filter: { fields: { contentType: { eq: \"posts\" } } }\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date\r\n            categories {\r\n              category\r\n            }\r\n            featuredImage\r\n          }\r\n        }\r\n      }\r\n    }\r\n    postCategories: allMarkdownRemark(\r\n      filter: { fields: { contentType: { eq: \"postCategories\" } } }\r\n      sort: { order: ASC, fields: [frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}